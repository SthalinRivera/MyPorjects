generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String?
  phoneNumber String?
  avatarUrl   String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roleId      Int
  addresses   Address[]   @relation("UserAddresses")
  favorites   Favorites[]
  projects    Project[]
  reviews     Review[]
  role        Role        @relation(fields: [roleId], references: [id])
  visits      Visit[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  users     User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  title        String
  slug         String        @unique
  description  String
  image_url    String
  project_url  String
  code_url     String?
  video_url    String?
  likes        Int           @default(0)
  is_featured  Boolean       @default(false)
  tags         String[]
  technologies String[]
  status       ProjectStatus @default(COMPLETED)
  created      DateTime      @default(now())
  startDate    DateTime?
  endDate      DateTime?
  userId       Int
  categoryId   Int
  Favorites    Favorites[]
  Category     Category      @relation(fields: [categoryId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  reviews      Review[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String?   @unique
  imageUrl    String?
  description String?
  projects    Project[]
}

model Favorites {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  projectId Int
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  city       String
  state      String?
  country    String
  postalCode String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  userId     Int
  user       User     @relation("UserAddresses", fields: [userId], references: [id])
}

model Visit {
  id        Int      @id @default(autoincrement())
  path      String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

enum ProjectStatus {
  COMPLETED
  IN_PROGRESS
  PAUSED
}
